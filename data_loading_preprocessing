''' Libraries '''
import pandas as pd
import numpy as np
from itertools import combinations
from tqdm import tqdm
from astropy.stats import sigma_clip

'''' Helper Functions '''
def ADC_convert(signal, gain, offset):
    """Convert ADC signal using gain and offset."""
    signal = signal.astype(np.float64)
    return signal / gain + offset

def apply_dark_correction(signal, dark):
    """Subtract dark current from signal."""
    return signal - np.tile(dark, (signal.shape[0], 1, 1))

def apply_flat_correction(signal, flat, dead):
    """Correct for flat field variations and mask dead pixels."""
    flat = np.ma.masked_where(dead, flat)
    flat = np.tile(flat, (signal.shape[0], 1, 1))
    return signal / flat

def mask_hot_dead(signal, dead, dark):
    """Mask hot and dead pixels using sigma clipping."""
    hot = sigma_clip(dark, sigma=5, maxiters=5).mask
    hot = np.tile(hot, (signal.shape[0], 1, 1))
    dead = np.tile(dead, (signal.shape[0], 1, 1))
    signal = np.ma.masked_where(dead, signal)
    signal = np.ma.masked_where(hot, signal)
    return signal

def apply_linear_correction(signal, linear_corr):
    """Apply linearity correction to the signal."""
    linear_corr = np.flip(linear_corr, axis=0)
    for x, y in np.ndindex(signal.shape[1:]):  # Iterate over each pixel
        polynomial = np.poly1d(linear_corr[:, x, y])
        signal[:, x, y] = polynomial(signal[:, x, y])
    return signal

def subtract_read_noise(signal, read):
    """Subtract read noise from the signal."""
    return signal - np.tile(read, (signal.shape[0], 1, 1))

'''' Preprocessing Function '''
def preprocess_planet_data(planet_id, adc_info, sensor, calibration_steps):
    """Preprocess data for a given planet and sensor using selected calibration steps."""
    cut_inf, cut_sup = 39, 321
    sensor_sizes_dict = {"AIRS-CH0":[[11250, 32, 356], [1, 32, cut_sup-cut_inf]], "FGS1":[[135000, 32, 32], [1, 32, 32]]}
    linear_corr_dict = {"AIRS-CH0":(6, 32, 356), "FGS1":(6, 32, 32)}

    signal_file = f'E:/{dataset}/{planet_id}/{sensor}_signal.parquet'
    signal = pd.read_parquet(signal_file).to_numpy()
    signal = signal.reshape(sensor_sizes_dict[sensor][0])

    # Load calibration files
    dark = pd.read_parquet(f'E:/{dataset}/{planet_id}/{sensor}_calibration/dark.parquet').to_numpy()
    dead = pd.read_parquet(f'E:/{dataset}/{planet_id}/{sensor}_calibration/dead.parquet').to_numpy()
    flat = pd.read_parquet(f'E:/{dataset}/{planet_id}/{sensor}_calibration/flat.parquet').to_numpy()
    read = pd.read_parquet(f'E:/{dataset}/{planet_id}/{sensor}_calibration/read.parquet').to_numpy()
    linear_corr = pd.read_parquet(f'E:/{dataset}/{planet_id}/{sensor}_calibration/linear_corr.parquet').values.astype(np.float64).reshape(linear_corr_dict[sensor])
    read = pd.read_parquet(f'E:/{dataset}/{planet_id}/{sensor}_calibration/read.parquet').to_numpy()

    # ADC conversion
    gain = adc_info.loc[planet_id, f"{sensor}_adc_gain"]
    offset = adc_info.loc[planet_id, f"{sensor}_adc_offset"]
    signal = ADC_convert(signal, gain, offset)

    # Apply calibration steps dynamically
    for step in calibration_steps:
        if step == "dark":
            signal = apply_dark_correction(signal, dark)
        elif step == "flat":
            signal = apply_flat_correction(signal, flat, dead)
        elif step == "dead":
            signal = mask_hot_dead(signal, dead, dark)
        elif step == "linear_corr":
            signal = apply_linear_correction(signal, linear_corr)
        elif step == "read":
            signal = subtract_read_noise(signal, read)

    return signal

'''' Combinations of calibration steps Test function  '''
def test_calibration_combinations(adc_info, sensors, planet_ids):
    """Test all combinations of calibration steps for each planet and sensor."""
    calibration_steps = ["dark", "flat", "dead", "linear_corr", "read"]
    results = {}

    for planet_id in tqdm(planet_ids, desc="Processing Planets"):
        results[planet_id] = {}
        for sensor in sensors:
            sensor_results = []
            for r in range(1, len(calibration_steps) + 1):
                for steps in combinations(calibration_steps, r):
                    processed_signal = preprocess_planet_data(planet_id, adc_info, sensor, steps)
                    sensor_results.append((steps, processed_signal))
            results[planet_id][sensor] = sensor_results
    return results

''' Main '''

dataset = 'train'
adc_info = pd.read_csv(r"E:\train_adc_info.csv", index_col='planet_id')
all_planet_ids = adc_info.index
sensors = ["AIRS-CH0", "FGS1"]
test_planet_ids = [1011759019, 100468857]
#results = test_calibration_combinations(adc_info, sensors, test_planet_ids)
calibration_steps = ["dark", "flat", "dead", "linear_corr", "read"]
planet_id = 1011759019
sensor = "AIRS-CH0"
signal = preprocess_planet_data(planet_id, adc_info, sensor, calibration_steps)

# Processed results are now in the `results` dictionary: data / mask
print("Calibration testing completed!")