''' Libraries '''
from sklearn.decomposition import PCA

''' Functions '''
# Principal Component Analysis (PCA)
def PCA_projection(spectrums, nb_pca):
    """projection on reduced PCA space"""
    pca = PCA()
    proj = pca.fit_transform(spectrums)  
    proj[:, nb_pca:] = 0
    return pca.inverse_transform(proj)[:, :]

# Singular Value Decomposition (SVD)
def svd_denoise(signals,dim=1,weight=None):
    signals_=signals.copy()
    if weight is not None:
        signals_*=weight.reshape((1,-1))
    U,D,V=np.linalg.svd(signals_.T@signals_)
    U=(signals_@V.T)/D**0.5
    pcs=U[:,:dim]
    signals_denoised=pcs@(np.linalg.inv(pcs.T@pcs)@(pcs.T@signals))
    return signals_denoised

''' Main '''

## For PCA 

STARS = np.array(adc_info["star"]).astype("i4")
STAR_KEYS = np.unique(STARS)
WAVELENGTH_SELECTION =  np.array([0]+list(range(36, 318))) # [cut_inf:cut_sup]
NB_V = len(WAVELENGTH_SELECTION) # cut_sup-cut_inf

# correct standard (high dynamics) spectra with PCA
AVG_STAR_SNR = np.mean(np.array([STARS_SNRS[star][WAVELENGTH_SELECTION] for star in STAR_KEYS]), axis=0)
raws = results["standard"][:, :NB_V].copy()
results["standard"][:, :NB_V] = PCA_projection(raws*AVG_STAR_SNR, 7)/AVG_STAR_SNR

# correct
for star in [0, 1, 2]:
    if not star in STAR_KEYS: continue
    selec = STARS == star
    coeff = STARS_SNRS[star][WAVELENGTH_SELECTION]    
    results["standard"][selec, :NB_V] = PCA_projection(raws[selec, :]*coeff, 5)/coeff

## For SVD
svd_dim=140
svd_snr_power=0.6